// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  clerkUserId   String    @unique //clerk user id
  email         String    @unique
  name          String?
  imageUrl      String?
  industry      String?     //Combined industry-subindustry(e.g -> "tech-software-development)
  industryInsight   industryInsight? @relation(fields: [industry], references: [industry]) //we want to connect this Industry to Industry-Table
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  //Profile fields(Asking user some questions)
  bio             String?
  experience      Int?       //Years of experience
  skills          String[]   // Array of skills

  assessments     Assessment[]
  resume          Resume?
  coverLetter     CoverLetter[] 
}

model Assessment{
  id               String      @id @default(cuid())
  userId           String
  user             User        @relation(fields: [userId], references: [id])
  quizScore        Float       //Overall quiz score
  questions        Json[]      //Array of {question, answer, userAnswer, isCorrect}
  category         String      //"Technical", "Behavioral", etc.
  improvementTip   String?     //AI-generated improvement tip
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@index([userId])// index this table ->This makes it unique
}

model Resume{
  id               String      @id @default(cuid())
  userId           String      @unique //One resume per user
  user             User        @relation(fields: [userId], references: [id])
  content          String      @db.Text //Markdown content
  atsScore         Float?
  feedback         String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model CoverLetter{
  id               String      @id @default(cuid())
  userId           String      @unique //One resume per user
  user             User        @relation(fields: [userId], references: [id])
  content          String      //Markdown content
  jobDescription   String?
  companyName      String      //Name of the company applying to
  jobTitle         String      //Position applying for
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@index([userId])
}

model industryInsight {
  id               String      @id @default(cuid())
  industry         String      @unique //The industry this data belongs to (e.g -> "texh-software development")

  // List of the Users in this industry
  users           User[]

  // Salary Data(or salary ranges)
  salaryRanges    Json[]  //Array of { role:string, min:float, max:float, median:float, location:string? }

  // Industry trends
  growthRate      Float     //Industry growth rate
  demandLevel     DemandLevel    // "High", "Medium", "Low"
  topSkills       String[]  //Most in-demand skills

  // Current Market conditions
  marketOutlook   MarketOutlook    //"Positive", "Neutral", "Negative"
  keyTrends       String[]  //Array of current industry trends

  // Learning suggestions
  recommendedSkills  String[]  //Skills recommended for the industry

  lastUpdated        DateTime   @default(now())
  nextUpdate         DateTime   //Schedule update time(which will be on next weekend)

  @@index([industry])
}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}
